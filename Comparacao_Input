import pandas as pd


# Função para carregar CSV com tratamento de erros
def load_csv(file_path):
    try:
        return pd.read_csv(file_path, delimiter=';')
    except pd.errors.ParserError as e:
        print(f"Erro ao carregar o arquivo {file_path}: {e}")
        return pd.DataFrame()


# Função para normalizar identificadores
def normalize_column(df, column):
    if column in df.columns:
        df[column] = df[column].str.strip().str.lower()
    return df


# Função principal para comparar planilhas
def compare_sheets(file_paths, compare_fields):
    dataframes = [load_csv(path) for path in file_paths]

    # Verificar se algum DataFrame está vazio
    if any(df.empty for df in dataframes):
        print("Erro ao carregar um dos arquivos CSV. Verifique os arquivos e tente novamente.")
        return

    # Imprimir as colunas presentes em cada DataFrame (para depuração)
    for i, df in enumerate(dataframes):
        print(f"Colunas presentes no DataFrame {i + 1}:")
        print(df.columns.tolist())
        print()

    # Normalizar os campos de comparação
    for df in dataframes:
        for field in compare_fields:
            df = normalize_column(df, field)

    # Verificar se todos os DataFrames possuem as colunas necessárias
    if all(all(field in df.columns for field in compare_fields) for df in dataframes):
        # Criar uma nova coluna 'Match' em cada DataFrame
        base_df = dataframes[0]
        for df in dataframes[1:]:
            base_df['Match'] = base_df.apply(
                lambda row: 'Yes' if (df[compare_fields] == row[compare_fields]).all(axis=1).any() else 'No', axis=1)

        # Filtrar apenas as linhas que encontraram correspondência
        matched_df = base_df[base_df['Match'] == 'Yes'][compare_fields]

        # Definir o caminho de saída
        output_path = input(
            "Digite o caminho para salvar o arquivo de resultado (por exemplo, 'C:\\path\\to\\Comparison_Result.csv'): ")

        # Salvar o DataFrame resultante em um novo arquivo CSV
        matched_df.to_csv(output_path, index=False)

        print("\nComparação realizada com sucesso. Resultado salvo em 'Comparison_Result.csv'.")
    else:
        print("\nColunas necessárias para comparação não encontradas em todos os DataFrames.")


# Função para obter entradas do usuário
def main():
    # Input do usuário para o número de arquivos
    num_files = int(input("Digite o número de planilhas a serem comparadas: "))
    file_paths = [input(f"Digite o caminho do arquivo {i + 1}: ") for i in range(num_files)]

    # Input do usuário para os campos de comparação
    compare_fields = input(
        "Digite os campos a serem comparados, separados por vírgula (por exemplo, 'Hostname,Username'): ").split(',')
    compare_fields = [field.strip() for field in compare_fields]

    compare_sheets(file_paths, compare_fields)


if __name__ == "__main__":
    main()

